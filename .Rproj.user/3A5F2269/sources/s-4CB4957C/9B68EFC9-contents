### Age of empires

### Código re-elaborado por Toaki Hoz Canabal de https://luisdva.github.io/rstats/aoe-PCA/

####### ############### ################# #################### ##### 
# 
# 
# 
#  Para aprender webscraping: https://dcl-wrangle.stanford.edu/index.html
# 
# 
# 
####### ############### ################# #################### #####


# https://github.com/aocpip/aoe2stats
# Para aprender github: https://happygitwithr.com/rstudio-git-github.html
# https://ageofempires.fandom.com/wiki/Unique_unit_(Age_of_Empires_II) 

### instalar y Cargar paquetes-----
# install.packages("scico") # paleta de colores
# 
# install.packages("ggrepel") #text labels -> https://ggrepel.slowkow.com/
# 
# install.packages("gghighlight") # para destacar (subrayar en ggplot)
# # https://yutannihilation.github.io/gghighlight/
# # https://yutani.rbind.io/post/2018-06-16-re-intro-to-gghighlight/
# 
# install.packages("unheadr") # El objetivo de unheadres ayudar a disputar datos cuando tienen subtítulos incrustados o cuando los valores se envuelven en varias filas.
# # https://github.com/luisDVA/unheadr



pacman::p_load(gghighlight,ggrepel,janitor, jsonlite, readr,rvest, scico, tidyverse, tidytext,  unheadr, xml2)


### Repaso de {unheadr}-------
# https://unheadr.liomys.mx/
# https://github.com/luisDVA/unheadr



### Cargamos datos -------

## Estos son de aqí https://www.ageofempires.com/stats/ageiide-global
(wins_popularidad <- tibble::tribble(
  ~Civilization, ~Victory.Rate,  ~Popularity,
       "Aztecs",      "53.17%",       "3.9%",
     "Bengalis",      "41.75%",       "0.1%",  
      "Berbers",      "55.15%",      "2.75%",
    "Bohemians",      "50.21%",      "1.36%",
      "Britons",      "45.66%",      "3.42%",
   "Bulgarians",      "50.94%",       "2.6%",
  "Burgundians",      "51.30%",      "2.12%",
      "Burmese",      "48.86%",         "1%",
   "Byzantines",      "48.74%",      "2.22%",
        "Celts",      "46.65%",      "1.55%",
      "Chinese",      "47.06%",      "1.81%",
       "Cumans",      "51.11%",      "4.13%",
   "Dravidians",      "46.14%",      "0.17%",
   "Ethiopians",      "52.58%",      "4.29%",
       "Franks",      "54.00%",      "7.24%",
        "Goths",      "47.60%",      "2.58%",
     "Gurjaras",      "51.40%",       "0.3%",
  "Hindustanis",      "50.78%",      "1.77%",
         "Huns",      "49.47%",      "3.57%",
        "Incas",      "52.32%",      "1.46%",
     "Italians",      "46.43%",      "1.48%",
     "Japanese",      "43.57%",      "1.43%",
        "Khmer",      "47.85%",      "2.12%",
      "Koreans",      "49.69%",      "1.33%",
  "Lithuanians",      "45.30%",       "2.2%",
      "Magyars",      "54.70%",      "8.05%",
        "Malay",      "43.34%",      "1.18%",
      "Malians",      "50.33%",      "1.34%",
       "Mayans",      "48.28%",      "3.24%",
      "Mongols",      "44.04%",      "2.48%",
     "Persians",      "42.13%",       "1.5%",
        "Poles",      "50.40%",      "1.79%",
   "Portuguese",      "46.73%",      "1.41%",
     "Saracens",      "52.16%",      "2.41%",
    "Sicilians",      "52.09%",      "2.54%",
        "Slavs",      "49.61%",      "1.65%",
      "Spanish",      "46.02%",       "2.1%",
       "Tatars",      "50.95%",      "2.67%",
      "Teutons",      "49.36%",      "2.67%",
        "Turks",      "48.29%",      "2.16%",
   "Vietnamese",      "47.42%",      "1.75%",
      "Vikings",      "53.65%",      "4.15%")
 )


wins_popularidad  %>% 
  janitor::clean_names() %>% 
  mutate_at(.vars = c("victory_rate", "popularity"), funs(as.numeric(gsub("%","",.))))

wins_popularidad <- wins_popularidad  %>% 
  janitor::clean_names() %>% 
  mutate_at(.vars = c("victory_rate", "popularity"), ~as.numeric(gsub("%","",.)))



# la pa´gina de los siguientes datos: https://www.unitstatistics.com/age-of-empires2/
(general_units <- read_html("https://www.unitstatistics.com/age-of-empires2/") %>% 
  html_element(css = "#tablepress-6") %>% 
  html_table())


# Seleccionar antes de un patrón                    ##
# Seleccionar antes de un patron                      ##
# seleccionar antes de un patron        ################# https://stackoverflow.com/questions/38291794/extract-string-before
# Seleccionar antes de un delimitador                 ##
# seleccionar antes de un delimitador                ##

# ¿Cómo selecciono el primer elemento de cada uno, sé que s con for o con un apply ### ### ##### #### ### ### #
names <- names(general_units) <- general_units %>% 
  janitor::clean_names() %>%
  names()

names %>% 
  str_split(., "_") %>% 
  unlist()
### ### ##### #### ### ### # ### ### ##### #### ### ### # ### ### ##### #### ### ### # ### ### ##### #### ### ### # 


names(general_units) <- general_units %>% 
  janitor::clean_names() %>%
  names() %>% 
  sub("\\_.*", "", .)  # quitar antes de un delimitar o quitar antes de un caracte # quitar antes de un delimitar o quitar antes de un caracter



### Descargamos el json con las debilidades de cada unidad de https://age-of-empires-unit-counters.vercel.app/

# que tiene su repositorio en: https://github.com/lukethacoder/age-of-empires-unit-counters


(relacion_uni <- fromJSON("01_datos/units.json") %>% 
  tibble())


(relacion_uni_ampliado <- relacion_uni %>% 
  unnest("unit_counters"))


(relacion_uni_ampliado <- 
    relacion_uni_ampliado %>% 
  select(id, name, unit_id) %>% 
  left_join(relacion_uni, by= c("unit_id" = "id"),
            suffix = c("_unit", "_unit_weakness")) %>% 
  select(id:slug) %>% 
  distinct() )

## Filtramos por NA
relacion_uni_ampliado %>% 
  filter(is.na(name_unit_weakness)) %>%  # https://www.riinu.me/2020/02/r-filtering-with-na-values/
  print(n = Inf) %>% 
  count(unit_id) # Las unidades faltantes



### Descargamos datos de la api (en este caso del github): https://github.com/aalises/age-of-empires-II-api

# "C:\\Users\\BryanToaki\\Documents\\Cursos complementarios\\Diversion\\Age_of_empires\\01_datos\\age-of-empires-II-api-master\\data"

library(readr)
(civilizations <- read_csv("01_datos/age-of-empires-II-api-master/data/civilizations.csv"))
(units <- read_csv("01_datos/age-of-empires-II-api-master/data/units.csv")) # Para practicar la selección de ciertos parametros ggg




# Introduction to Hierarchical Edge Bundling with R -----------------------
# Let’s start by creating the hierarchic structure with R. A hierarchic structure is basically a set of nodes, with edges linking nodes. We often accompany it with a second data frame that gives features for each node of the first data frame.

pacman::p_load(ggraph, igraph)

# create a data frame giving the hierarchical structure of your individuals. 
# Origin on top, then groups, then subgroups
(d1 <- data.frame(from="origin", 
                  to=paste0("group", seq(1,10), 
                            sep="")))

(d2 <- data.frame(from=rep(d1$to, each=10), to=paste("subgroup", seq(1,100), sep="_")))

(hierarchy <- rbind(d1, d2))


# create a vertices data.frame. One line per object of our hierarchy, giving features of nodes.
(vertices <- 
  data.frame(name = unique(c(as.character(hierarchy$from), 
                             as.character(hierarchy$to))))
  )


# Create a graph object with the igraph library
mygraph <- graph_from_data_frame( hierarchy, vertices=vertices )
# This is a network object, you visualize it as a network like shown in the network section!

# With igraph: 
plot(mygraph, vertex.label="", edge.arrow.size=0, vertex.size=2)


# With ggraph:
ggraph(mygraph, layout = 'dendrogram', circular = FALSE) + 
  geom_edge_link() +
  theme_void()

ggraph(mygraph, layout = 'dendrogram', circular = TRUE) + 
  geom_edge_diagonal() +
  theme_void()

# Add a few connections
# 
# Now, let’s add a second input to our data: connections. Suppose that nodes 18, 20 and 30 are connected to nodes 19, 50 and 70 respectively.
# 
# An obvious solution to represent this link could be to add a straight line (left). The hierarchical edge bundling method does almost that. But it curves the lines to make thelm follow the edges of our structure (right).
# 
# This method offers a tension parameters which controls how much we want to curve the lines.



#### Practicando lo anterior -----------------

(d1 <- relacion_uni %>% 
  filter(is_unique == T) %>% 
  count(civilization$name) %>% 
  mutate(from = "origin") %>% 
  select(from, to =`civilization$name`, n))

## Dos opciones para obervar los datos, con count o no pero con unique en ambos 


names2 <- relacion_uni %>% 
  filter(is_unique == T) %>% 
  select(c(2,5,6)) %>% 
  arrange(civilization$name)

(d2 <- data.frame(from=rep(d1$to, d1$n),
                  to = names2$name))

d1 <- d1 %>% select(-n)

(hierarchy <- rbind(d1, d2))


(vertices <- 
    data.frame(name = unique(c(as.character(hierarchy$from), 
                               as.character(hierarchy$to))))
)

mygraph <- graph_from_data_frame( hierarchy, vertices=vertices )
p <- plot(mygraph, vertex.label="", edge.arrow.size=0, vertex.size=2)
plotly::ggplotly(p)
# Hierarchical Edge Bundling ----------------------------------------------






